

<!DOCTYPE html>
<html class="js-html" lang="en">
  <head>
    
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-V8NLDKPXH3"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-V8NLDKPXH3', {
      'user_id': ''
    });

    
  </script>




    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="initial-scale=1.0, maximum-scale=1, width=device-width">
    <meta name="robots" content="Index, Follow">
    <title>
  Rahim Basol | Swimcloud
</title>
    <link rel="canonical" href="https://www.swimcloud.com/swimmer/2700350/" />
    
  <meta name="description" content="Rahim Basol&#039;s swimmer profile, including times, results, and more."/>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;1,400;1,500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/media/css/main.1718718008.css" media="all">
    
      <link rel="shortcut icon" href="/media/img/swimcloud/favicons/favicon.ico">
      <link rel="icon" type="image/png" sizes="32x32" href="/media/img/swimcloud/favicons/favicon-32x32.png">
      <link rel="icon" type="image/png" sizes="16x16" href="/media/img/swimcloud/favicons/favicon-16x16.png">
      <link rel="apple-touch-icon" sizes="180x180" href="/media/img/swimcloud/favicons/apple-touch-icon.png">
    

    <script type="text/javascript">var _sf_startpt=(new Date()).getTime();</script>
    

    
  
  <meta property="og:site_name" content="Swimcloud" />
  <meta property="og:type" content="profile" />
  <meta property="og:url" content="https://swimcloud.com/swimmer/2700350" />
  <meta property="og:title" content="Rahim Basol" />

  <meta name="twitter:card" content="summary" />
  <meta name="twitter:site" content="@collegeswimnews" />
  <meta name="twitter:title" content="Rahim Basol" />

  
    <meta property="og:description" content="Troy, MI" />
    <meta name="twitter:description" content="Troy, MI" />
  

  
    <meta property="og:image" content="https://dummyimage.com/160x160/eeeeee/061616.png&text=RB" />
    <meta name="twitter:image" content="https://dummyimage.com/160x160/eeeeee/061616.png&text=RB" />
  

  <script type="application/ld+json">
    {
      "@context": "http://schema.org/",
      "@type": "Person",
      
      "homeLocation": {
        "@type": "PostalAddress",
        "addressCountry": "USA",
        "addressLocality": "Troy",
        "addressRegion": "MI"
      },
      
      
        "image": "https://dummyimage.com/160x160/eeeeee/061616.png&text=RB",
      
      "name": "Rahim Basol"
    }
  </script>

  </head>

  <body class="yui3-skin-sam u-background-gray-10">
    <!-- Google Tag Manager (noscript) -->
    <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-WDZBFJZ"
    height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    <!-- End Google Tag Manager (noscript) -->

    
      

<div class="c-header">
  <div class="c-header__start">
    <button
  class="c-header__toggle-btn c-header__toggle-btn--desktop js-sc-drawer-desktop-toggle"
  type="button"
  aria-label="Main menu">
  <svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
  </svg>
</button>

    <button
  class="c-header__toggle-btn c-header__toggle-btn--mobile js-sc-drawer-mobile-toggle"
  type="button"
  aria-label="Main menu">
  <svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
  </svg>
</button>


    <a class="c-header__home" href="/">
      <img
        class="c-header__logo hidden-xs"
        src="/media/img/swimcloud/logos/swimcloud.svg"
        alt="Swimcloud logo">

      <img
        class="c-header__logo visible-xs"
        src="/media/img/swimcloud/logos/swimcloud-simple.svg"
        height="20"
        alt="Swimcloud logo compact version">
    </a>
  </div>


  

<link href="/media/webpack/globalSearch/index.1707824349.css" rel="stylesheet">
<script defer src="/media/webpack/globalSearch/index.1721120970.js"></script>

<div
  id="global-search"
  class="c-header__search"
  data-global-search-items="[]"
>
  <!-- REACT APP -->
</div>



  <div class="c-header__end">
    
      <nav class="c-nav c-nav--inline c-nav--global">
        <a class="c-nav__item u-text-upcase hidden-xs" href="/login">Login</a>
        <a class="c-nav__item u-text-upcase hidden-xs" href="/register">Register</a>
        <div class="visible-xs dropdown">
          <button
            class="c-nav__item dropdown-toggle"
            data-toggle="dropdown"
            type="button"
            aria-label="Login or Register dropdown">
            
  
    <i class="fas fa-user-circle fa-2x" aria-hidden="true"></i>
  


          </button>
          <ul class="dropdown-menu dropdown-menu-right">
            <li><a href="/login">Login</a></li>
            <li><a href="/register">Register</a></li>
          </ul>
        </div>
      </nav>
    
  </div>
</div>

    

    <div class="c-layout">
      
        


<div class="c-sc-drawer  c-sc-drawer--desktop js-sc-drawer-desktop ">
  

  <nav class="c-nav c-nav--compact">
    <a
      class="c-nav__item "
      href="/">
      <i class="c-nav__icon far fa-home-alt" aria-hidden="true"></i>
        Home
    </a>

    <a
      class="c-nav__item "
      data-test-id="drawer-meets-link"
      href="/results/">
      <i class="c-nav__icon far fa-list-alt" aria-hidden="true"></i>
      Meets
    </a>

    
    
      
    
    

    

    <a
      class="c-nav__item "
      href="/times/">
      <i class="c-nav__icon far fa-stopwatch" aria-hidden="true"></i>
      Top Times
    </a>

    <a
      class="c-nav__item "
      href="/team/rankings/">
      <i class="c-nav__icon far fa-tshirt" aria-hidden="true"></i>
      Team Rankings
    </a>

    <a
      class="c-nav__item "
      href="/recruiting/">
      <i class="c-nav__icon far fa-graduation-cap" aria-hidden="true"></i>
      Recruiting
    </a>

    
    
      
          <a
            class="c-nav__item "
            href="/videos/">
            <i class="c-nav__icon far fa-video" aria-hidden="true"></i>
            Videos
          </a>
      
    

    
    

    <a
      class="c-nav__item "
      href="/meetsimulator/">
      <i class="c-nav__icon far fa-wand-magic-sparkles" aria-hidden="true"></i>
      Meet Simulator
    </a>

    




    




    <div class="c-nav__group">
      <a class="c-nav__item" href="/help">
        <i class="c-nav__icon far fa-question-circle" aria-hidden="true"></i>
        Help
      </a>
    </div>
  </nav>

  <footer class="c-footer">
  <nav class="c-footer__nav">
    <a class="c-footer__link" href="/privacy">Privacy</a>
    <a class="c-footer__link" href="/terms">Terms</a>
  </nav>
    
</footer>

</div>



        


<div class="c-sc-drawer  c-sc-drawer--mobile js-sc-drawer-mobile">
  
  <header class="c-sc-drawer__header-mobile">
    <a class="u-block" href="/">
      <img src="/media/img/swimcloud/logos/swimcloud.svg" alt="Swimcloud">
    </a>
    <button
      class="btn btn-icon btn-icon-plain js-sc-drawer-mobile-close"
      type="button">
      <i class="far fa-chevron-left"></i>
      <span class="u-is-hidden-visually">Close</span>
    </button>
  </header>


  <nav class="c-nav c-nav--compact">
    <a
      class="c-nav__item "
      href="/">
      <i class="c-nav__icon far fa-home-alt" aria-hidden="true"></i>
        Home
    </a>

    <a
      class="c-nav__item "
      data-test-id="drawer-meets-link"
      href="/results/">
      <i class="c-nav__icon far fa-list-alt" aria-hidden="true"></i>
      Meets
    </a>

    
    
      
    
    

    

    <a
      class="c-nav__item "
      href="/times/">
      <i class="c-nav__icon far fa-stopwatch" aria-hidden="true"></i>
      Top Times
    </a>

    <a
      class="c-nav__item "
      href="/team/rankings/">
      <i class="c-nav__icon far fa-tshirt" aria-hidden="true"></i>
      Team Rankings
    </a>

    <a
      class="c-nav__item "
      href="/recruiting/">
      <i class="c-nav__icon far fa-graduation-cap" aria-hidden="true"></i>
      Recruiting
    </a>

    
    
      
          <a
            class="c-nav__item "
            href="/videos/">
            <i class="c-nav__icon far fa-video" aria-hidden="true"></i>
            Videos
          </a>
      
    

    
    

    <a
      class="c-nav__item "
      href="/meetsimulator/">
      <i class="c-nav__icon far fa-wand-magic-sparkles" aria-hidden="true"></i>
      Meet Simulator
    </a>

    




    




    <div class="c-nav__group">
      <a class="c-nav__item" href="/help">
        <i class="c-nav__icon far fa-question-circle" aria-hidden="true"></i>
        Help
      </a>
    </div>
  </nav>

  <footer class="c-footer">
  <nav class="c-footer__nav">
    <a class="c-footer__link" href="/privacy">Privacy</a>
    <a class="c-footer__link" href="/terms">Terms</a>
  </nav>
    
</footer>

</div>


  <div class="c-sc-drawer__backdrop-mobile js-sc-drawer-mobile-backdrop"></div>


      

      <div id="layout-main" class="c-layout__main js-alerts-container">
        
  



        






        
  <div class="container">
    <div class="c-toolbar c-toolbar--fluid">
      <div
        class="c-toolbar__cover hidden-print"
        style="background-image: url(https://s3.amazonaws.com/cstest/mb/default-covers/blue-abstract-bg-1.png);">
      </div>

      <div class="c-toolbar__header">
        <div class="c-toolbar__media c-toolbar__media-user hidden-print">
          

          
            <div class="initials">RB</div>
          
        </div>

        <div class="c-toolbar__header-content">
          <h1 class="c-toolbar__title u-flex u-flex-align-items-center">
            <span class="u-mr-">Rahim Basol</span>

            

            
            
          </h1>

          <div class="c-toolbar__meta hidden-print">
            <ul class="o-list-inline o-list-inline--dotted">
              <li>Troy, MI</li>
              
                <li>
                  <a href="/team/3951">Troy High School</a>
                </li>
              

              
                
              
            </ul>
          </div>
        </div>

        
      </div>

      <div class="c-toolbar__nav js-nav-priority">
  <nav class="c-nav c-nav--inline u-overflow-hidden">
    
      <a
        class="c-nav__item
          
          
            c-nav__item--active
          "
        href="/swimmer/2700350/">
        Home
      </a>
    
      <a
        class="c-nav__item
          
          "
        href="/swimmer/2700350/meets/">
        Meets
      </a>
    
      <a
        class="c-nav__item
          
          "
        href="/swimmer/2700350/rankings/">
        Rankings
      </a>
    

    
  </nav>
</div>



    </div>
  </div>

        
  <div class="container">
    <div class="row">
      <div class="col-sm-6 u-pr@sm ">
        



        
  <div class="c-card c-card--large c-card--divided">
    <div class="c-card__item u-flex u-flex-justify-between u-flex-align-items-center">
      <h2 class="c-title">Meets</h2>

      
    </div>

    <div id="js-swimmer-profile-latest-times">
      <div id="js-swimmer-profile-latest-times-container">
        





<div class="c-card__item">
  <div class="dropdown">
    <button
      class="btn btn-default dropdown-toggle u-text-start u-text-truncate"
      type="button"
      data-toggle="dropdown"
      aria-haspopup="true"
      aria-expanded="true">

      <div class="o-media">
        <img
          class="o-media__img c-avatar c-avatar--tiny u-object-contain"
          src="https://s3.amazonaws.com/cstest/mb/2017/01/Rolyal_Oak_HS_logo.jpg.220x220_q95.jpg"
          alt="Royal Oak Second Chance Meet">
        <div class="o-media__body">
          <div class="u-flex u-flex-align-items-center">
            <span class="u-text-truncate">Royal Oak Second Chance Meet</span>
            <span class="u-color-mute u-ml- caret"></span>
          </div>
          <div class="u-color-mute u-text-xsmall u-text-normal">Feb 26, 2024</div>
        </div>
      </div>
    </button>

    <ul class="dropdown-menu">
      
        <li class="active">
          <a
            id="latest-times-meet-load"
            class="u-flex u-flex-justify-between u-flex-align-items-end"
            href="/swimmer/2700350/times/latest/?meet_id=298832">
            Royal Oak Second Chance Meet
            <span class="u-ml- u-color-mute u-text-small">Feb. 26, 2024</span>
          </a>
        </li>
      
    </ul>
  </div>
</div>

<div class="c-table-clean--responsive">
  <table class="c-table-clean c-table-clean--middle table table-hover">
    <thead>
      <tr>
        <th>Event</th>
        <th class="c-table-clean__col-fit u-text-end">Time</th>
        
        <th class="c-table-clean__col-fit u-text-end">Place</th>
        <th class="c-table-clean__col-fit u-text-end">Imp</th>
        
        
      </tr>
    </thead>

    <tbody>
      
        <tr>
          <td>
            50 Y Free
            
              
                <span class="u-color-mute">Timed Finals</span>
              
            
          </td>

          <td class="u-text-semi u-text-end">
            
              <a href="/results/298832/event/4/?id=120892764#time120892764">23.15</a>
            
          </td>

           

          <td class="u-text-end">
            
              
                2nd
              
            
          </td>

          <td class="u-text-end">
            
              &ndash;
            
          </td>

          

          
        </tr>
        
    </tbody>
  </table>
</div>

      </div>
    </div>
  </div>


        


  <div class="c-card c-card--large c-card--divided">
    <div class="c-card__item">
      <h2 class="c-title">Teams</h2>
    </div>

    <div class="c-card__item">
      
        
  
    
      <ul class="c-list c-list--multiline">
    
  


<li class="c-list__item">
  
    <a class="c-list__avatar u-is-hidden@palm" href="/team/3951" title="Troy High School">
      <img
        class="c-avatar c-avatar--tiny
        u-object-contain"
        src="https://s3.amazonaws.com/cstest/mb/2019/10/c0e632d2-32cc-4e.jpeg.220x220_q95.jpg"
        alt="Troy High School logo"
        loading="lazy">
    </a>
  
  <div class="c-list__primary-content">
    <h3 class="c-list__title">
      
    <a href="/team/3951">Troy High School</a>
  
    </h3>
    
    
      <div class="c-list__text">
        <ul class="o-list-inline o-list-inline--dotted">
          
          <li>Troy, MI</li>
        </ul>
      </div>
    

    

    

  
  </div>
  <div class="c-list__secondary-content">
    
    
  
  </div>
</li>


  
    </ul>
  


      
    </div>
  </div>


      </div>

      <div class="col-sm-6">
        





        <div class="c-card c-card--large c-card--divided">
  <div class="c-card__item" data-swimmer-id="2700350">
    <h2 class="c-title">Specialty</h2>
  </div>

  <div class="c-card__item u-p++">
    <canvas id="radarChart"></canvas>
    <canvas class="u-block u-1/2 u-center u-pt++" id="gradient" height="5"></canvas>
    <div class="u-clearfix u-text-small u-center u-1/2 u-mt-">
      <span class="u-pull-start">Sprint</span>
      <span class="u-pull-end">Distance</span>
    </div>
  </div>
</div>

<script type="text/javascript">
  function colorCalculator(distance, alpha) {
    var distance = distance * 2.55;
    var result = "rgba(" + String(255-parseInt(distance/10)) + ",0," + String(0+parseInt(distance/10)) + "," + String(alpha) + ")";
    return result;
  }

  function drawChart(data) {
  	var config = {
      type: 'radar',
      data: {
    		labels: ["Free", "Back", "Breast", "Fly", "IM"],
    		datasets: [{
    			data: [
            data['1'],
            data['2'],
            data['3'],
            data['4'],
            data['5'],
          ],
    		}],
      },
      options: {
        aspectRatio: 2,
        legend: {
          display: false,
        },
        tooltips: {
          enabled: false,
        },
        elements: {
          point: {
            radius: 0,
            hoverRadius: 0,
          },
          line: {
            backgroundColor: colorCalculator(data['d'], 1),
            borderColor: colorCalculator(data['d'], 1),
            borderWidth: 1,
            tension: 0,
          }
        },
        scale: {
          angleLines: {
            color: '#eee',
          },
          gridLines: {
            color: '#eee',
            display: true,
          },
          ticks: {
            display: false,
            min: -100,
            suggestedMax: 1000,
            stepSize: 200,
          },
          pointLabels: {
            fontFamily: '"Roboto", "Helvetica", "Arial", "sans-serif"',
            fontSize: '16',
            fontColor: 'rgba(0, 0, 0, .87)',
          },
        },
      },
  	};

    var ctx2 = document.getElementById("radarChart").getContext("2d");
  	var chart = new Chart(ctx2, config);
    // generate gradient
    var c = document.getElementById("gradient");
    var w = document.getElementById("radarChart").width;
    var ctx = c.getContext("2d");
    var gradient = ctx.createLinearGradient(0, 0, w, 0);
    gradient.addColorStop(0, "red");
    gradient.addColorStop(1, "blue");
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, w, 5);
  }

  document.addEventListener("DOMContentLoaded", function(){
    $.getJSON("/swimmer/2700350/specialty/", function(data) {

      //replace undefined with 0
      var strokes = ['1', '2', '3', '4', '5'];
      for (var i = 0; i < strokes.length; i++) {
        if (data[strokes[i]] == undefined) {
          data[strokes[i]] = 0;
        }
      }
      drawChart(data);
    })
  });
</script>

        <style type="text/css">
  .line {
      fill: none;
      stroke: #4178BE;
      stroke-width: 2;
  }

  .chart{
    background: white;
  }

  .dot {
      fill: #4178BE;
      stroke: #fff;
      stroke-width: 2px;
  }

  .dot:hover{
    fill: #4178BE;
    stroke: white;
    stroke-width: 2px;
  }
</style>



      </div>

      <div class="col-sm-12">
        


  <div class="c-card c-card--large c-card--divided o-grid__col-span-2" id="js-swimmer-profile-times">
    <div class="c-card__item">
      <h2 class="c-title">Times</h2>
    </div>
    <div class="c-card__item">
        <ul class="c-tabs u-mb">
          <li class="c-tabs__item active" data-tab="personalBests">
            <a class="c-tabs__link u-text-truncate"
            href="/swimmer/2700350/times/fastest/">
              PERSONAL BESTS
            </a>
          </li>
          <li class="c-tabs__item" data-tab="eventProgression">
            <a class="c-tabs__link u-text-truncate"
            href="/swimmer/2700350/times/byevent/">
              EVENT PROGRESSION
            </a>
          </li>
        </ul>

      <div class="u-flex u-mb+" id="filter-container">
        <div class="u-mr+ u-nowrap" id="courseDropDownWrapper">
  <label class="u-color-mute u-text-small" for="course">Course</label>
  <div class="dropdown">
    <button
    class="btn btn-default btn-sm dropdown-toggle u-text-start u-text-truncate js-filters"
    type="button"
    id="courseDropDownList"
    data-toggle="dropdown"
    aria-haspopup="true"
    aria-expanded="true">
      All
      <span class="u-color-mute u-ml- caret"></span>
    </button>

    <ul class="dropdown-menu" aria-labelledby="sortDropDownList">
      <li class="active">
        <a href="#" class="courseFilter" data-course="" type="button">All</a>
      </li>
      
        <li>
          <a
          class="courseFilter"
          href="#"
          data-course="Y"
          >
            SCY
          </a>
        </li>
      
    </ul>
  </div>
</div>





        
        <div class="u-mr+ u-nowrap" id="distanceDropDownWrapper">
  <label class="u-color-mute u-text-small" for="sort">Sort by</label>
  <div class="dropdown">
    <button
    class="btn btn-default btn-sm dropdown-toggle u-text-start u-text-truncate"
    type="button"
    id="sortDropDownList"
    data-toggle="dropdown"
    aria-haspopup="true"
      aria-expanded="true">
      Distance
      <span class="u-color-mute u-ml- caret"></span>
    </button>

    <ul class="dropdown-menu" aria-labelledby="sortDropDownList">
      <li class="active">
        <a href="#" class="distanceSort" data-distance="" type="button">Distance</a>
      </li>
      <li>
        <a href="#" class="distanceSort" data-distance="fina_points" type="button">Best</a>
      </li>
    </ul>
  </div>
</div>





        

<div class="u-nowrap u-is-hidden js-event-id" id="eventDropDownWrapper" data-event-id="150Y">
  <label class="u-color-mute u-text-small" for="event">Event</label>
  <div class="dropdown">
    <button
      class="btn btn-default btn-sm dropdown-toggle u-text-start u-text-truncate"
      type="button"
      id="byEventDropDownList"
      data-toggle="dropdown"
      aria-haspopup="true"
      aria-expanded="true">
      50 Y Free
      <span class="u-color-mute u-ml- caret"></span>
    </button>

    <ul class="dropdown-menu" aria-labelledby="byEventDropDownList">
      
        <li class=" active ">
          <a
            class="eventFilter"
            href="#"
            data-event="150Y"
          >
            50 Y Free
          </a>
        </li>
      
    </ul>
  </div>
</div>

      </div>

      <div id="js-swimmer-profile-times-container">
        
          
          

          <div class="c-table-clean--responsive">
            <table class="c-table-clean c-table-clean--middle table table-hover">
              <thead>
                <tr>
                  <th>Event</th>
                  <th class="c-table-clean__col-fit u-text-end">Time</th>
                  
                  <th class="hidden-xs">Meet</th>
                  <th class="c-table-clean__col-fit">Date</th>
                   
                </tr>
              </thead>

              <tbody>
                
                  <tr>
                   
                    <td class="u-text-truncate">
                      <a href="/swimmer/2700350/times/byevent/?event=150Y" class="js-event-link">50 Y Free</a>
                    </td>

                    <td class="u-text-end u-text-semi">
                      
                        <a href="/results/298832/event/4/?id=120892764#time120892764">23.15</a>
                      
                    </td>

                    

                    <td class="hidden-xs">
                      
                        <a href="/results/298832">Royal Oak Second Chance Meet</a>
                      
                    </td>

                    <td class="u-text-truncate">Feb 26, 2024</td>

                    
                  </tr>
                
              </tbody>
            </table>
          </div>
        
      </div>
    </div>
  </div>


        



        


  


        


  


      </div>
    </div>
  </div>

      </div>
    </div>


    




  

  <script
    src="https://browser.sentry-cdn.com/7.91.0/bundle.tracing.min.js"
    integrity="sha384-mLp8eX2NZEYz/yYlB3hz0DAxA9qX7yneHI9PPB9DfnLCo4Z+yC1XQzP9D7b9oqS2"
    crossorigin="anonymous"
  ></script>


  <script>
    const WEBPACK_PATH =
      "https://www.swimcloud.com/media/webpack/";

    Sentry.init({
      dsn: "https://d5e74d4028ae4a06a155bdeee21e45cc@o375140.ingest.sentry.io/5199088",
      release: "633d535e0ee9fbbbcc327d8bc766b5e7c2baeacc",
      environment: "production",
      ignoreErrors: ["Non-Error exception captured"],
      beforeSend(event) {
        if (event.exception)
          try {
            const isWebpack = event.exception.values[0].stacktrace.frames.some(
              (frame) => frame.filename.includes(WEBPACK_PATH)
            );
            return isWebpack ? event : null;
          } catch (error) {
            return null;
          }
        return event;
      },
      integrations: [new Sentry.BrowserTracing()],
      tracesSampleRate: 0.001,
    });

    Sentry.configureScope((scope) => {
      const user = {
        id: Number("") || undefined,
        email: "" || undefined,
        username: "" || undefined
      };
      if (user.id) scope.setUser(user);
    });
  </script>


    <script src="/media/js/jquery-3.7.1.min.1707824348.js"></script>
    <script src="/media/js/bootstrap.min.1707824348.js"></script>
    <script defer src="/media/js/swimcloud/nav-priority.1707824348.js"></script>
    <script type="text/javascript" src="/media/js/js.cookie.min.1707824348.js"></script>
    



    <script>
  jQuery(function($) {
    $(document).ready(function() {
      var targetElement = $('.js-bs-tooltip');
      if (targetElement.length) {
        targetElement.tooltip({
          placement: 'auto bottom',
          trigger: 'hover'
        });
      }
    });
  });
</script>


    <script src="/media/js/swimcloud/drawer.1707824348.js"></script>
    <script type="text/javascript">
      //set csrf cookie for jquery ajax post calls
      window.onload = function (e) {
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
        var csrftoken = getCookie('csrftoken');
        //set up cookie
        function csrfSafeMethod(method) {
            // these HTTP methods do not require CSRF protection
            return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
        }
        $.ajaxSetup({
            beforeSend: function(xhr, settings) {
                if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
                    xhr.setRequestHeader("X-CSRFToken", csrftoken);
                }
            }
        });
      };
    </script>

    <script type="text/javascript">
      // resolving: https://github.com/select2/select2/issues/3354
      $(document).ready(function() {
        $(':input').on('select2:unselect', function(e) {
          var $el = $(this);

          if ($el.data('select2').selection.$search) {
            setTimeout(function () {
              // console.log($el.data('select2').selection.prototype);
              $el.data('select2').selection.$search.val("");
            }, 0);
          };
        });
      });
    </script>

    

    

    
  
  <script src="/media/js/expandable.1707824348.js"></script>
  <script type="text/javascript" src="/media/js/cs_utils.1707824348.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js" integrity="sha256-Uv9BNBucvCPipKQ2NS9wYpJmi8DTOEfTA/nH2aoJALw=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3@5.16.0/dist/d3.min.js" integrity="sha256-Xb6SSzhH3wEPC4Vy3W70Lqh9Y3Du/3KxPqI2JHQSpTw=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.9.1/d3-tip.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js"> </script>
  <script type="text/javascript">

    function getCookie(name) {
      if (!document.cookie) {
        return null;
      }

      const xsrfCookies = document.cookie.split(';')
        .map(c => c.trim())
        .filter(c => c.startsWith(name + '='));

      if (xsrfCookies.length === 0) {
        return null;
      }
      return decodeURIComponent(xsrfCookies[0].split('=')[1]);
    }

    const csrfToken = getCookie('csrftoken');

    function makeAjaxRequest(url, container, drawChart){
      xhttp = new XMLHttpRequest();

      const urlObj = new URL(url, window.location.href);
      if (!urlObj.searchParams.has('sort')) {
        urlObj.searchParams.set('sort', currentSort || '');
      }
      if (!urlObj.searchParams.has('course')) {
        urlObj.searchParams.set('course', currentCourse || '');
      }
      if (!urlObj.searchParams.has('season')) {
        urlObj.searchParams.set('season', currentSeason || '');
      }
      if (!urlObj.searchParams.has('event')) {
        urlObj.searchParams.set('event', currentEvent || '');
      }
      xhttp.open("GET", urlObj.href);
      xhttp.setRequestHeader("X-CSRFToken", csrfToken);
      xhttp.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      xhttp.setRequestHeader("Content-Type", "application/json");
      xhttp.setRequestHeader("HTTP_X_REQUESTED_WITH", "XMLHttpRequest");
      container.innerHTML = '<div class="u-relative u-height-100"><div class="c-spinner"><div class="c-spinner__item"></div></div></div>';
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          let res = this.responseText;
          timesCache[urlObj.href] = res;
          container.innerHTML = res;
          if (xhttp.status === 200 && drawChart && container === document.getElementById("js-swimmer-profile-times-container")){
            initProgressChart(getMeetEventId());
          }
        }
      };
      xhttp.send()
    }

    const timesCache = {}
    const swimmerLatestTimes = document.getElementById("js-swimmer-profile-latest-times");
    const latestTimesNode = document.getElementById("js-swimmer-profile-latest-times-container");

    if(swimmerLatestTimes){
        swimmerLatestTimes.addEventListener('click', function(e) {
          var clickedMeet = (e.target ? e.target : e.srcElement);
          let url = clickedMeet.href;
          if (url && url.includes("/swimmer/")){
            e.preventDefault();
            if (timesCache[url]) {
              latestTimesNode.innerHTML = timesCache[url];
            }
            else {
              makeAjaxRequest(url, latestTimesNode, false)
            }
          }
      })
    }


    const events = JSON.parse('{"150Y": {"name": "50 Y Free", "id": "150Y", "points": "442.00", "splash_id": 120892764}}');
    const swimmerTimes = document.getElementById("js-swimmer-profile-times");
    const timesNode = document.getElementById("js-swimmer-profile-times-container");
    const activeTab = document.querySelector('.c-tabs__item.active a');
    const dropdownDistanceButton = document.getElementById('sortDropDownList');
    const dropdownCourseButton = document.getElementById('courseDropDownList');
    const dropdownSeasonButton = document.getElementById('seasonDropDownList');
    const dropdownEventButton = document.getElementById('byEventDropDownList');
    const courseDropdownWrapper = document.getElementById('courseDropDownWrapper');
    const distanceDropdownWrapper = document.getElementById('distanceDropDownWrapper');
    const eventDropdownWrapper = document.getElementById('eventDropDownWrapper');
    const seasonDropdownWraper = document.getElementById("seasonDropDownWrapper");
    const filterContainer = document.getElementById("filter-container");

    let currentCourse = '';
    let currentSort = '';
    let currentSeason = '';
    let currentEvent = '';

    if(document.querySelector('.js-event-id')){
      currentEvent = document.querySelector('.js-event-id').dataset.eventId;
    }

    if(swimmerTimes){
      swimmerTimes.addEventListener('click', function(e){
        let clickedEvent = (e.target ? e.target : e.srcElement);
        let eventTab = clickedEvent.closest(".c-tabs__item");
        if(clickedEvent.classList.contains("js-event-link")){
          eventTab = switchToEventProgressionTab(clickedEvent)
        }

        let url = "";
        // if filter is clicked we have to build the url
        if(clickedEvent.classList.contains("distanceSort") || clickedEvent.classList.contains("courseFilter") || clickedEvent.classList.contains("seasonFilter") || clickedEvent.classList.contains("eventFilter")){
          url = updateFilters(e, clickedEvent)
        }else{
          url = clickedEvent.href;
        }

        if (eventTab) {
          eventTab.classList.add('active');
          eventTabName = eventTab.getAttribute("data-tab");
          for (let sibling of eventTab.parentNode.children) {
              if (sibling !== eventTab) sibling.classList.remove('active');
          }

          updateFiltersVisibility(eventTabName)

          // show/hide event filter

        }
        if (url && url.includes("/swimmer/")){
          e.preventDefault();
          if (timesCache[url]) {
            timesNode.innerHTML = timesCache[url];
            initProgressChart(getMeetEventId());
          }
          else {
            makeAjaxRequest(url, timesNode, true);
          }
        }
      })
    }

    function updateFiltersVisibility(eventTabName){
      if(eventTabName == "eventProgression"){
        eventDropdownWrapper.classList.remove("u-is-hidden");
        courseDropdownWrapper.classList.add("u-is-hidden");
        distanceDropdownWrapper.classList.add("u-is-hidden");
        if(filterContainer && eventDropDownWrapper && seasonDropdownWraper){
          eventDropdownWrapper.classList.add("u-mr+");
          filterContainer.insertBefore(eventDropDownWrapper, seasonDropdownWraper);
        }
      }else{
        eventDropdownWrapper.classList.add("u-is-hidden");
        courseDropdownWrapper.classList.remove("u-is-hidden");
        distanceDropdownWrapper.classList.remove("u-is-hidden");
      }
    }

    function updateFilters(event, clickedEvent){
      const selectedText = clickedEvent.textContent;
      const activeTab = document.querySelector('.c-tabs__item.active a');
      let url = activeTab.href;
      if(clickedEvent.classList.contains("distanceSort")){
        currentSort = clickedEvent.getAttribute("data-distance");
        dropdownDistanceButton.innerHTML = selectedText + ' <span class="u-color-mute u-ml- caret"></span>';
        activateDropdownItem("distanceSort", "data-distance", currentSort)
        currentEvent = '';
      }else if(clickedEvent.classList.contains("courseFilter")){
        currentCourse = clickedEvent.getAttribute("data-course");
        dropdownCourseButton.innerHTML = selectedText + ' <span class="u-color-mute u-ml- caret"></span>';
        activateDropdownItem("courseFilter", "data-course", currentCourse)
        currentEvent = '';
      }else if(clickedEvent.classList.contains("seasonFilter")){
        currentSeason = clickedEvent.getAttribute("data-season");
        dropdownSeasonButton.innerHTML = selectedText + ' <span class="u-color-mute u-ml- caret"></span>';
        activateDropdownItem("seasonFilter", "data-season", currentSeason)
      }
      if(clickedEvent.classList.contains("eventFilter")){
        currentEvent = clickedEvent.getAttribute("data-event");
        dropdownEventButton.innerHTML = selectedText + ' <span class="u-color-mute u-ml- caret"></span>';
        activateDropdownItem("eventFilter", "data-event", currentEvent)
      }

      url += `?course=${currentCourse}&sort=${currentSort}&season=${currentSeason}&event=${currentEvent}`;

      return url
    }

    function switchToEventProgressionTab(clickedEvent) {
      const url = clickedEvent.href;
      const selectedText = clickedEvent.textContent
      const urlObj = new URL(url, window.location.href);

      if(urlObj.searchParams.has("event")){
        currentEvent = urlObj.searchParams.get("event")
        dropdownEventButton.innerHTML = selectedText + ' <span class="u-color-mute u-ml- caret"></span>';
        activateDropdownItem("eventFilter", "data-event", currentEvent)
      }

      const eventProgressionTab = document.querySelector('a[href$="/times/byevent/"]').closest('.c-tabs__item');
      const personalBestsTab = document.querySelector('a[href$="/times/fastest/"]').closest('.c-tabs__item');

      personalBestsTab.classList.remove('active');
      eventProgressionTab.classList.add('active');

      return eventProgressionTab
    }

    function activateDropdownItem(dropdownClassName,dataName,value) {
      const items = document.querySelectorAll('.' + dropdownClassName);
      items.forEach(function(item) {
        item.parentNode.classList.remove('active');
      });

      const itemToActivate = document.querySelector('.' + dropdownClassName + '[' + dataName + '="' + value + '"]');
      if (itemToActivate) {
        itemToActivate.parentNode.classList.add('active');
      }
    }

    
    const cache_DATA = {};
    const margin = {top: 20, right: 30, bottom: 40, left: 40}

    
    if (d3.select(".js-swimmer-profile-overall-progress").node() != null){
      draw("perf")
    }

    function initProgressChart(meet_event){
      if (d3.select(".js-progress-chart-container").node() != null){
        draw(meet_event);
      }
    }



    function draw(meet_event){
      const cacheKey = `${meet_event}-${currentSeason}`;
      let cached_data = cache_DATA[cacheKey]
      let is_seasonPerformance = isSeasonPerformance(meet_event)
      if(cached_data){
        if(is_seasonPerformance){
          return draw_season_performance(cached_data);
        }else{
          return draw_event_record(cached_data);
        };
      }else{
        let url = getUrl(meet_event, is_seasonPerformance);
        d3.json(url).then(data => {
          if(is_seasonPerformance){
            draw_season_performance(data);
          }else{
            draw_event_record(data);
          };
          cache_DATA[cacheKey] = data
        });
      };
    };

    function getMeetEvent(){
      return d3.select(".js-event-id-selector").node().value;
    }

    function getMeetEventId(){
      if(currentEvent){
        return currentEvent
      }
      const eventIdTarget = document.querySelector('.js-event-id');
      if(eventIdTarget){
        return eventIdTarget.dataset.eventId
      }
    }


    function isSeasonPerformance(meet_event){
      if(meet_event == "perf"){
        return true
      }else{
        return false
      }
    }
    // construct the url for ajax request
    function getUrl(meet_event, is_seasonPerformance){
      let swimmer_id = null;
      if(is_seasonPerformance){
        swimmer_id = d3.select(".js-swimmer-profile-overall-progress").attr("data-swimmer-id");
        return  "/api/swimmers/" + swimmer_id + "/avg_perf/"
      }else{
        swimmer_id = d3.select(".js-progress-chart-container").attr("data-swimmer-id");
        return `/api/swimmers/${swimmer_id}/event_records/?event=${meet_event}&season=${currentSeason}`
      }
    }

    // clear svg to redraw it
    function clear_svg_tip(){
      if(!d3.select("#progress_svg").empty()){
          d3.selectAll(".tip").remove();
        }
    }

    function style_grid(){
      d3.selectAll(".domain").remove();
      d3.selectAll(".x.axis .tick line").style("color", "white");
      d3.selectAll(".y.axis .tick line").style("color", "grey").style("opacity", "0.15");
    }

    // draw season performance chart
    function draw_season_performance(data){

      let progressContainer, width, height, xScale, xAxis, yScale, yAxis, path, svg;

      progressContainer = d3.select(".js-swimmer-profile-overall-progress").node().getBoundingClientRect()
      width = progressContainer.width - margin.left - margin.right ; // Use the window's borderWidth
      height = width / 2;

      svg = d3.select(".js-swimmer-profile-overall-progress").append("svg")
          .attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom))
          .attr("id", "progress_svg")
          .attr("class", "chart")
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      xScale = d3.scaleTime().range([0, width]);

      yScale = d3.scaleLinear();

      xAxis = svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")

      yAxis = svg.append("g")
            .attr("class", "y axis")

      path = svg.append("path")
            .attr("class", "line")

      //clear legend
      d3.selectAll(".legend").remove()

      const parseTime = d3.timeParse("%Y-%Y")
      data.forEach(d => {
        d.season_year = parseTime(d.season_label)
      });

      xScale.domain(d3.extent(data, function(d){ return d.season_year; })).range([5, width]);
      yScale.domain(d3.extent(data, function(d){ return d.score; })).range([height, 0]).nice();

      let line = d3.line()
        .x(function(d){ return xScale(d.season_year); })
        .y(function(d){ return yScale(d.score); })
        .curve(d3.curveMonotoneX)

      xAxis
        .call(d3.axisBottom(xScale)
        .tickArguments([5])
        .tickSizeInner(-height)
        .tickPadding(10)
      );

      yAxis
        .call(d3.axisLeft(yScale)
            .tickSizeInner(-width)
            .tickArguments([5])
            );

      path.datum(data).attr("d", line);

      //making tick lines opacity - 0.5 and removing domain
      style_grid()

      let tip = d3.tip().attr('class', 'tip')
          .direction(function(d){
            let position = "";
            //get dot dimensions -> x == svg.width " || y == svg.height
            dimensions = d.parent.getBBox()

            // get vertical sign -> y coordinates
            if(dimensions.y <= height/2){
              position = position.concat("s")
            }else {
              position = position.concat("n")
            }

            // get horizontal sign -> x coordinates
            if (dimensions.x <= width/2){
              position = position.concat("e")
            }else {
              position = position.concat("w")
            }
            return position;
          })
          .offset([0, -2])
          .html(function(d){
              let content = "<div style='margin-left: 2.5px; background-color: #212121; opacity: 0.9; border-radius: 4px; padding: 10px 15px; font-size: 14px;'><strong class='u-color-white'> Season " + d.season_label + "</strong>";

              d.fastest_times.forEach(function(time){
                content += "</br><span class='u-color-white'>" + time.event + " : " + time.time + "</span>";
              });

              content += "</div>";

              return content;
          })
      svg.call(tip);

      svg.selectAll("#sb_text").remove()

      svg.selectAll(".dot")
        .data(data)
        .exit()
        .remove()

      let dots = svg.selectAll(".dot").data(data)
      dots
        .enter()
        .append("circle")
        .merge(dots)
        .attr("class", "dot")
        .attr("cx", function(d){ return xScale(d.season_year)})
        .attr("cy", function(d){ return yScale(d.score) })
        .attr("r", 5)
        .on('mouseover',function(d){
          d.parent = this;
          tip.show(d, this);
          d3.select(this).attr("r", 10)
        })
        .on('mouseout', function(d){
          tip.hide(d)
          d3.select(this).attr("r", 5)
        });
    }




    // draw meet event chart
    function draw_event_record(data){
      let progressContainer, width, height, xScale, xAxis, yScale, yAxis, path, svg;

      progressContainer = d3.select(".js-progress-chart-container").node().getBoundingClientRect()
      width = progressContainer.width - margin.left - margin.right ; // Use the window's borderWidth
      height = 350;

      if (data.length === 0){
        d3.select("#progress_svg").remove();
        return null;
      }

      svg = d3.select(".js-progress-chart-container").append("svg")
          .attr("viewBox", "0 0 " + (width + margin.left + margin.right) + " " + (height + margin.top + margin.bottom))
          .attr("id", "progress_svg")
          .attr("class", "chart")
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      xScale = d3.scaleTime()
              .range([0,width]);

      yScale = d3.scaleLinear();

      xAxis = svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")

      yAxis = svg.append("g")
            .attr("class", "y axis")


      path = svg.append("path")
            .attr("class", "line")

      //clear legend
      d3.selectAll(".legend").remove()


      let grouped_data = _.groupBy(data, "season_id")
      let pairs = _.toPairs(grouped_data).map(([key,value]) => {
        let best_time = _.minBy(value, function(d){
          return +d.eventtime;
        })
        return [key, best_time];
      })
      let dataMap = _.fromPairs(pairs)
      //pairs = {season : [events]} - events per season
      //use pairs.length to calculate approx years
      let years = pairs.length;
      let personal_best = _.minBy(data, function(d){
        return +d.eventtime
      })
      if (personal_best)
        personal_best["is_personalBest"] = true
      const parseTime = d3.timeParse("%Y-%m-%d");
      data.forEach(d => {
        d["tip_href"] = "//www.swimcloud.com/results/" + d.meet.id;
        d.swim_date = parseTime(d.dateofswim);
        if( _.includes(dataMap, d)){
          d["is_seasonBest"] = true
        }
      })

      function customTicks(years){
        if(years <= 2){
          return d3.timeMonth.every(3)
        }else{
          return d3.timeYear.every(1)
        }
      }

      function customTickFormat(years){
        if(years <= 2){
          return d3.timeFormat("%b %Y")
        }else{
          return d3.timeFormat("%Y")
        }
      }

      let legend = svg.append("g")
        .attr("class", "legend")
        .attr("x", 0)
        .attr("y", height + margin.bottom)
        .attr("height", 100)
        .attr("width", 100);

      legend.append("text")
        .attr("x", 0)
        .attr("y", height + margin.bottom)
        .text("SB: Season best")
        .attr("font-size", 13)
        .style("fill", "#9855d4");

      legend.append("text")
        .attr("x",120)
        .attr("y", height + margin.bottom)
        .text("PB: Personal best")
        .attr("font-size", 13)
        .style("fill", "#1565c0");


      xScale.domain(d3.extent(data, function(d){ return d.swim_date; }))
      yScale.domain(d3.extent(data, function(d){ return +d.eventtime; })).range([0, height]).nice()


      let line = d3.line()
        .x(function(d){ return xScale(d.swim_date); })
        .y(function(d){ return yScale(d.eventtime); })
        .curve(d3.curveMonotoneX)

      xAxis
        .call(d3.axisBottom(xScale)
              .tickFormat(customTickFormat(years))
              .tickArguments([customTicks(years)])
              .tickSizeInner(-height)
              .tickPadding(10)
              );

      yAxis
        .call(d3.axisLeft(yScale)
              .tickFormat(d => decimalToSwim(d))
              .tickSizeInner(-width)
              .tickPadding(5)
              .tickArguments([6])
            );

      path.datum(data).attr("d", line)

      //making tick lines opacity - 0.5 and removing domain
      style_grid()

      //build tip
      let tip = d3.tip().attr('class', 'tip')
        .direction(function(d){
          let position = "";
          //get dot dimensions -> x == svg.width " || y == svg.height
          dimensions = d.parent.getBBox()

          // get vertical sign -> y coordinates
          if(dimensions.y <= height/3){
            position = position.concat("s")
          }else {
            position = position.concat("n")
          }

          // get horizontal sign -> x coordinates
          if (dimensions.x <= width/2){
            position = position.concat("e")
          }else {
            position = position.concat("w")
          }
          return position;
        })
        .offset([0, -2])
        .html(d => {
          let content = ""
          if(d.dateofswim){
            const options = { year: 'numeric', month: 'long', day: 'numeric' };
            const dateOfSwim  = new Date(d.dateofswim).toLocaleDateString("en-US", options);
            content = "<div style='margin-left: 2.5px; background-color: #212121; border-radius: 4px; padding: 10px 15px; font-size: 14px;'><strong class='u-color-white'>" + decimalToSwim(d.eventtime) + "</strong> &nbsp; <a style='color: #82B1FF;' target='_blank' href="+ d.tip_href + ">" + d.meet.name + "</a>&nbsp;<strong class='u-color-white'>" + dateOfSwim + "</strong></div>";
          }else{
            content = "<div style='margin-left: 2.5px; background-color: #212121; border-radius: 4px; padding: 10px 15px; font-size: 14px;'><strong class='u-color-white'>" + decimalToSwim(d.eventtime) + "</strong> &nbsp; <a style='color: #82B1FF;' target='_blank' href="+ d.tip_href + ">" + d.meet.name + "</a></div>";
          }
          return content;
        })
      svg.call(tip);


      svg.selectAll(".dot")
        .data(data)
        .exit()
        .remove()

      let dots = svg.selectAll(".dot").data(data)
      dots
        .enter()
        .append("circle")
        .merge(dots)
        .attr("cx", function(d){ return xScale(d.swim_date) })
        .attr("cy", function(d){ return yScale(d.eventtime) })
        .attr("r", 5)
        .attr("class", "dot")
        .on('mouseover', function(d){
          d3.selectAll(".dot").attr("r", 5)
          d.parent = this
          let currentDot = d3.select(this)
          // use this to cut any other ongoing transitions associated with the d3 tip.
          d3.select(".tip").transition().on("start", function(){
              currentDot.attr("r", 8)
          })
          tip.show(d, this);
        })
        .on('mouseout', function(d){
          // using transition delay to give the user some time to reach the tooltip.
          d3.select(".tip").transition().delay(80)
            .on("end", function(){
              d3.selectAll(".dot").attr("r", 5)
              tip.hide(d)
          })
        })
        .on("wheel",function(d){
          d3.selectAll(".dot").attr("r", 5)
          tip.hide(d)
        });

      svg.selectAll("#sb_text").remove()

      //adding label for seasonBest/personalBest
      if(!svg.empty()){
        svg.append("g").selectAll("text").data(data)
          .enter()
          .append("text")
          .attr("x", function(d) { return xScale(d.swim_date) - 9})
          .attr("y", function(d) { return yScale(d.eventtime) - 7 })
          .attr("id", "sb_text")
          .style("fill", function(d){
            if(d.is_seasonBest){
              return d.is_personalBest ? "#1565c0" : "#9855d4"
            }
          })
          .text(function(d){
            if(d.is_seasonBest){
              return d.is_personalBest ? "PB" : "SB"
            }
          });
      }


      //If mouse is over the tooltip -> keep tooltip visible.
      d3.select(".tip")
        .on('mouseover', function(d){
          d3.select(this).transition().style("opacity", "1")
        })
        .on('mouseout', function(d){
          d3.select(this).transition().on("end", function(){
            d3.selectAll(".dot").attr("r", 5)
            tip.hide(d)
          })
        })
        .on("wheel", function(d){
            d3.selectAll(".dot").attr("r", 5)
            tip.hide(d)
          })
      };
    
  </script>

  
  <script>
  $(document).ready(function() {
    $('.js-drawer-open, .js-drawer-backdrop, .js-drawer-close').on('click touchstart', function (e) {
      $('.js-html').toggleClass('u-overflow-hidden');
      $('.js-drawer, .js-drawer-backdrop').toggleClass('is-visible');
      e.preventDefault();
    });
  });
</script>




      <script type='text/javascript'>
          /*
           * Hacky fix for a bug in select2 with jQuery 3.6.0's new nested-focus "protection"
           * see: https://github.com/select2/select2/issues/5993
           * see: https://github.com/jquery/jquery/issues/4382
           *
           * TODO: Recheck with the select2 GH issue and remove once this is fixed on their side
           */
          $(document).on('select2:open', () => {
            setTimeout(() => document.querySelector('.select2-search__field').focus(), 100);
          });
      </script>

    


    
    

<script type="text/javascript">
  var csrf_token = "jWdaXXeZ7Au0SaCJTnnRJnrSsuRa1db6eVBxvEc0BsA8BdrjKhk6UFbPuqjrAxX3";
  var tz_set_endpoint = '/tz_detect/';
  var csrf_header_name = 'x-csrftoken';
  (function() {
    var tz_script = document.createElement('script');
    tz_script.src = '/media/static/tz_detect/js/tzdetect.min.cbab13600a82.js';
    tz_script.setAttribute('async', 'true');
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(tz_script, s);
  })();
</script>


  </body>
</html>

